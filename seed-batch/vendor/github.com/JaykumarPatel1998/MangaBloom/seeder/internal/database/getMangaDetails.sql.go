// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: getMangaDetails.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getMangaDetails = `-- name: GetMangaDetails :many
SELECT 
    m.id AS manga_id,
    m.title AS manga_title,
    m.original_language,
    m.status,
    m.year,
    STRING_AGG(t.title || ' (' || t.language_code || ')', ', ') AS alternate_titles,
    STRING_AGG(a.name, ', ') AS author_names,
    STRING_AGG(ar.name, ', ') AS artist_names
FROM 
    manga m
LEFT JOIN titles t ON m.id = t.manga_id
LEFT JOIN manga_authors ma ON m.id = ma.manga_id
LEFT JOIN authors a ON ma.author_id = a.id
LEFT JOIN manga_artists mar ON m.id = mar.manga_id
LEFT JOIN artists ar ON mar.artist_id = ar.id
GROUP BY 
    m.id, m.title, m.original_language, m.status, m.year
ORDER BY 
    m.title
`

type GetMangaDetailsRow struct {
	MangaID          uuid.UUID
	MangaTitle       sql.NullString
	OriginalLanguage sql.NullString
	Status           sql.NullString
	Year             sql.NullInt32
	AlternateTitles  []byte
	AuthorNames      []byte
	ArtistNames      []byte
}

func (q *Queries) GetMangaDetails(ctx context.Context) ([]GetMangaDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMangaDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMangaDetailsRow
	for rows.Next() {
		var i GetMangaDetailsRow
		if err := rows.Scan(
			&i.MangaID,
			&i.MangaTitle,
			&i.OriginalLanguage,
			&i.Status,
			&i.Year,
			&i.AlternateTitles,
			&i.AuthorNames,
			&i.ArtistNames,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
