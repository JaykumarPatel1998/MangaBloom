// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: getMangaDetails.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const getMangaDetailsById = `-- name: GetMangaDetailsById :one
SELECT 
    m.id AS manga_id,
    JSONB_AGG(DISTINCT JSONB_BUILD_OBJECT('language_code', t.language_code, 'title', t.title)) AS manga_titles,
    JSONB_AGG(DISTINCT JSONB_BUILD_OBJECT('language_code', d.language_code, 'description', d.description)) AS manga_descriptions,
    m.original_language,
    m.status,
    ARRAY_AGG(DISTINCT ma.author_id) AS authors,
    ARRAY_AGG(DISTINCT mar.artist_id) AS artists
FROM
    manga m
LEFT JOIN titles t ON m.id = t.manga_id
LEFT JOIN descriptions d ON m.id = d.manga_id
LEFT JOIN manga_authors ma ON m.id = ma.manga_id
LEFT JOIN manga_artists mar ON m.id = mar.manga_id
WHERE m.id = $1
GROUP BY m.id
`

type GetMangaDetailsByIdRow struct {
	MangaID           uuid.UUID
	MangaTitles       json.RawMessage
	MangaDescriptions json.RawMessage
	OriginalLanguage  sql.NullString
	Status            sql.NullString
	Authors           interface{}
	Artists           interface{}
}

func (q *Queries) GetMangaDetailsById(ctx context.Context, id uuid.UUID) (GetMangaDetailsByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getMangaDetailsById, id)
	var i GetMangaDetailsByIdRow
	err := row.Scan(
		&i.MangaID,
		&i.MangaTitles,
		&i.MangaDescriptions,
		&i.OriginalLanguage,
		&i.Status,
		&i.Authors,
		&i.Artists,
	)
	return i, err
}
